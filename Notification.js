import PushNotification from 'react-native-push-notification';

function configure() {
  PushNotification.configure({
    // (required) Called when a remote is received or opened, or local notification is opened
    onNotification: function (notification) {
      console.log('NOTIFICATION:', notification);
      // process the notification
      // (required) Called when a remote is received or opened, or local notification is opened
      notification.finish();
    },
    // IOS ONLY (optional): default: all - Permissions to register.
    permissions: {
      alert: true,
      badge: true,
      sound: true,
    },
    // Should the initial notification be popped automatically
    // default: true
    popInitialNotification: true,
    /**
     * (optional) default: true
     * - Specified if permissions (ios) and token (android and ios) will requested or not,
     * - if not, you must call PushNotificationsHandler.requestPermissions() later
     * - if you are not using remote notification or do not have Firebase installed, use this:
     *     requestPermissions: Platform.OS === 'ios'
     */
    requestPermissions: true,
    requestPermissions: Platform.OS === 'ios',
    'content-available': 1,
  });
}

function createchannel() {
  PushNotification.createChannel({
    channelId: 'channel', // (required)
    channelName: 'My channel', // (required)
    channelDescription: 'A channel to categorise your notifications', // (optional) default: undefined.
    vibration: 10 * 1000, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
  });
}

function givenotification(title, message) {
  PushNotification.localNotification({
    channelId: 'channel',
    message: message, // (required)
    title: title,
    vibrate: true, // (optional) default: true
    vibration: 10 * 1000, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
    smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
    subText: 'important Alert', // (optional) default: none
    color: 'blue', // (optional) default: system default
    tag: 'some_tag', // (optional) add tag to message
    group: 'group', // (optional) add group to message
    invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
    timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null
    /* iOS and Android properties */
    id: this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    title: title, // (optional)
    message: message, // (required)
    userInfo: {sceen: 'NotificationScreens'}, // (optional) default: {} (using null throws a JSON value '<null>' error)
    playSound: true, // (optional) default: true
    sound: 'ringtone.mp3', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
  });
}

function teleconsultation_handler(title, message) {
  configure();
  createchannel();
  givenotification(title, message);
}
function appointmentbooked_handler(title, message) {
  configure();
  createchannel();
  givenotification(title, message);
}

// export  const notification = new Notification ();
export {teleconsultation_handler, appointmentbooked_handler};
// export {configure, createchannel, givenotification, notificationonschedule};
